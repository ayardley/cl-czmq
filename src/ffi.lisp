;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.10
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

;; Copyright (c) 2013, Lucas Hope <lucas.r.hope@gmail.com>.
;; Copyright other contributors as noted in the AUTHORS file.
;;
;; This file is part of cl-czmq - a re-binding of the C binding for
;; the zmq transport layer (czmq).
;;
;; This file is licensed under the terms of the LLGPL.
;;
;; This library is free software; you can redistribute it and/or modify
;; it under the terms of the Lisp Lesser General Public License version
;; 3, which consists of the GNU Lesser General Public License, either
;; version 3 or (at your option) any later version, as published by the
;; Free Software Foundation, and the Franz preamble.
;;
;; This library is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.

(in-package :cl-czmq)

(cffi:define-foreign-library libczmq
  (t (:default "libczmq")))

(cffi:use-foreign-library libczmq)



(cl:defconstant CZMQ_VERSION_MAJOR 1)

(cl:defconstant CZMQ_VERSION_MINOR 4)

(cl:defconstant CZMQ_VERSION_PATCH 0)

(cl:defconstant CZMQ_VERSION (cl:* 1 (cl:+ 10000 4) (cl:+ 100 0)))

(cffi:defcfun ("safe_malloc" safe_malloc) :pointer
  (size size_t)
  (file :string)
  (line :unsigned-int)
  (func :string))

(cl:defconstant ZMQ_POLL_MSEC 1)

(cffi:defcfun ("zbeacon_new" zbeacon_new) :pointer
  (port_nbr :int))

(cffi:defcfun ("zbeacon_destroy" zbeacon_destroy) :void
  (self_p :pointer))

(cffi:defcfun ("zbeacon_hostname" zbeacon_hostname) :string
  (self :pointer))

(cffi:defcfun ("zbeacon_set_interval" zbeacon_set_interval) :void
  (self :pointer)
  (interval :int))

(cffi:defcfun ("zbeacon_noecho" zbeacon_noecho) :void
  (self :pointer))

(cffi:defcfun ("zbeacon_publish" zbeacon_publish) :void
  (self :pointer)
  (transmit :pointer)
  (size size_t))

(cffi:defcfun ("zbeacon_silence" zbeacon_silence) :void
  (self :pointer))

(cffi:defcfun ("zbeacon_subscribe" zbeacon_subscribe) :void
  (self :pointer)
  (filter :pointer)
  (size size_t))

(cffi:defcfun ("zbeacon_unsubscribe" zbeacon_unsubscribe) :void
  (self :pointer))

(cffi:defcfun ("zbeacon_pipe" zbeacon_pipe) :pointer
  (self :pointer))

(cffi:defcfun ("zbeacon_test" zbeacon_test) :void
  (verbose bool))

(cffi:defcfun ("zclock_sleep" zclock_sleep) :void
  (msecs :int))

(cffi:defcfun ("zclock_log" zclock_log) :void
  (format :string)
  &rest)

(cffi:defcfun ("zclock_test" zclock_test) :int
  (verbose bool))

(cffi:defcfun ("zctx_new" zctx_new) :pointer)

(cffi:defcfun ("zctx_destroy" zctx_destroy) :void
  (self_p :pointer))

(cffi:defcfun ("zctx_shadow" zctx_shadow) :pointer
  (self :pointer))

(cffi:defcfun ("zctx_set_iothreads" zctx_set_iothreads) :void
  (self :pointer)
  (iothreads :int))

(cffi:defcfun ("zctx_set_linger" zctx_set_linger) :void
  (self :pointer)
  (linger :int))

(cffi:defcfun ("zctx_set_hwm" zctx_set_hwm) :void
  (self :pointer)
  (hwm :int))

(cffi:defcfun ("zctx_hwm" zctx_hwm) :int
  (self :pointer))

(cffi:defcfun ("zctx_underlying" zctx_underlying) :pointer
  (self :pointer))

(cffi:defcfun ("zctx_test" zctx_test) :int
  (verbose bool))

(cffi:defcvar ("zctx_interrupted" zctx_interrupted)
 :int)

(cffi:defcfun ("zctx__socket_new" zctx__socket_new) :pointer
  (self :pointer)
  (type :int))

(cffi:defcfun ("zctx__socket_destroy" zctx__socket_destroy) :void
  (self :pointer)
  (socket :pointer))

(cffi:defcfun ("zfile_exists" zfile_exists) bool
  (filename :string))

(cffi:defcfun ("zfile_size" zfile_size) ssize_t
  (filename :string))

(cffi:defcfun ("zfile_mode" zfile_mode) mode_t
  (filename :string))

(cffi:defcfun ("zfile_delete" zfile_delete) :int
  (filename :string))

(cffi:defcfun ("zfile_stable" zfile_stable) bool
  (filename :string))

(cffi:defcfun ("zfile_mkdir" zfile_mkdir) :int
  (pathname :string))

(cffi:defcfun ("zfile_rmdir" zfile_rmdir) :int
  (pathname :string))

(cffi:defcfun ("zfile_test" zfile_test) :int
  (verbose bool))

(cl:defconstant ZFRAME_MORE 1)

(cl:defconstant ZFRAME_REUSE 2)

(cl:defconstant ZFRAME_DONTWAIT 4)

(cffi:defcfun ("zframe_new" zframe_new) :pointer
  (data :pointer)
  (size size_t))

(cffi:defcfun ("zframe_new_zero_copy" zframe_new_zero_copy) :pointer
  (data :pointer)
  (size size_t)
  (free_fn :pointer)
  (arg :pointer))

(cffi:defcfun ("zframe_destroy" zframe_destroy) :void
  (self_p :pointer))

(cffi:defcfun ("zframe_recv" zframe_recv) :pointer
  (socket :pointer))

(cffi:defcfun ("zframe_recv_nowait" zframe_recv_nowait) :pointer
  (socket :pointer))

(cffi:defcfun ("zframe_send" zframe_send) :int
  (self_p :pointer)
  (socket :pointer)
  (flags :int))

(cffi:defcfun ("zframe_size" zframe_size) size_t
  (self :pointer))

(cffi:defcfun ("zframe_data" zframe_data) :pointer
  (self :pointer))

(cffi:defcfun ("zframe_dup" zframe_dup) :pointer
  (self :pointer))

(cffi:defcfun ("zframe_strhex" zframe_strhex) :string
  (self :pointer))

(cffi:defcfun ("zframe_strdup" zframe_strdup) :string
  (self :pointer))

(cffi:defcfun ("zframe_streq" zframe_streq) bool
  (self :pointer)
  (string :string))

(cffi:defcfun ("zframe_zero_copy" zframe_zero_copy) :int
  (self :pointer))

(cffi:defcfun ("zframe_more" zframe_more) :int
  (self :pointer))

(cffi:defcfun ("zframe_eq" zframe_eq) bool
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("zframe_print" zframe_print) :void
  (self :pointer)
  (prefix :string))

(cffi:defcfun ("zframe_reset" zframe_reset) :void
  (self :pointer)
  (data :pointer)
  (size size_t))

(cffi:defcfun ("zframe_freefn" zframe_freefn) :void
  (self :pointer)
  (free_fn :pointer)
  (arg :pointer))

(cffi:defcfun ("zframe_test" zframe_test) :int
  (verbose bool))

(cffi:defcfun ("zhash_new" zhash_new) :pointer)

(cffi:defcfun ("zhash_destroy" zhash_destroy) :void
  (self_p :pointer))

(cffi:defcfun ("zhash_insert" zhash_insert) :int
  (self :pointer)
  (key :string)
  (item :pointer))

(cffi:defcfun ("zhash_update" zhash_update) :void
  (self :pointer)
  (key :string)
  (item :pointer))

(cffi:defcfun ("zhash_delete" zhash_delete) :void
  (self :pointer)
  (key :string))

(cffi:defcfun ("zhash_lookup" zhash_lookup) :pointer
  (self :pointer)
  (key :string))

(cffi:defcfun ("zhash_rename" zhash_rename) :int
  (self :pointer)
  (old_key :string)
  (new_key :string))

(cffi:defcfun ("zhash_freefn" zhash_freefn) :pointer
  (self :pointer)
  (key :string)
  (free_fn :pointer))

(cffi:defcfun ("zhash_size" zhash_size) size_t
  (self :pointer))

(cffi:defcfun ("zhash_dup" zhash_dup) :pointer
  (self :pointer))

(cffi:defcfun ("zhash_keys" zhash_keys) :pointer
  (self :pointer))

(cffi:defcfun ("zhash_foreach" zhash_foreach) :int
  (self :pointer)
  (callback :pointer)
  (argument :pointer))

(cffi:defcfun ("zhash_save" zhash_save) :int
  (self :pointer)
  (filename :string))

(cffi:defcfun ("zhash_load" zhash_load) :int
  (self :pointer)
  (filename :string))

(cffi:defcfun ("zhash_autofree" zhash_autofree) :void
  (self :pointer))

(cffi:defcfun ("zhash_test" zhash_test) :void
  (verbose :int))

(cffi:defcfun ("zlist_new" zlist_new) :pointer)

(cffi:defcfun ("zlist_destroy" zlist_destroy) :void
  (self_p :pointer))

(cffi:defcfun ("zlist_first" zlist_first) :pointer
  (self :pointer))

(cffi:defcfun ("zlist_last" zlist_last) :pointer
  (self :pointer))

(cffi:defcfun ("zlist_head" zlist_head) :pointer
  (self :pointer))

(cffi:defcfun ("zlist_tail" zlist_tail) :pointer
  (self :pointer))

(cffi:defcfun ("zlist_next" zlist_next) :pointer
  (self :pointer))

(cffi:defcfun ("zlist_append" zlist_append) :int
  (self :pointer)
  (item :pointer))

(cffi:defcfun ("zlist_push" zlist_push) :int
  (self :pointer)
  (item :pointer))

(cffi:defcfun ("zlist_pop" zlist_pop) :pointer
  (self :pointer))

(cffi:defcfun ("zlist_remove" zlist_remove) :void
  (self :pointer)
  (item :pointer))

(cffi:defcfun ("zlist_dup" zlist_dup) :pointer
  (self :pointer))

(cffi:defcfun ("zlist_copy" zlist_copy) :pointer
  (self :pointer))

(cffi:defcfun ("zlist_size" zlist_size) size_t
  (self :pointer))

(cffi:defcfun ("zlist_sort" zlist_sort) :void
  (self :pointer)
  (compare :pointer))

(cffi:defcfun ("zlist_autofree" zlist_autofree) :void
  (self :pointer))

(cffi:defcfun ("zlist_test" zlist_test) :void
  (verbose :int))

(cffi:defcfun ("zloop_new" zloop_new) :pointer)

(cffi:defcfun ("zloop_destroy" zloop_destroy) :void
  (self_p :pointer))

(cffi:defcfun ("zloop_poller" zloop_poller) :int
  (self :pointer)
  (item :pointer)
  (handler :pointer)
  (arg :pointer))

(cffi:defcfun ("zloop_poller_end" zloop_poller_end) :void
  (self :pointer)
  (item :pointer))

(cffi:defcfun ("zloop_timer" zloop_timer) :int
  (self :pointer)
  (delay size_t)
  (times size_t)
  (handler :pointer)
  (arg :pointer))

(cffi:defcfun ("zloop_timer_end" zloop_timer_end) :int
  (self :pointer)
  (arg :pointer))

(cffi:defcfun ("zloop_set_verbose" zloop_set_verbose) :void
  (self :pointer)
  (verbose bool))

(cffi:defcfun ("zloop_start" zloop_start) :int
  (self :pointer))

(cffi:defcfun ("zloop_test" zloop_test) :void
  (verbose bool))

(cl:defconstant ZMQ_IGNERR 8)

(cffi:defcfun ("zmsg_new" zmsg_new) :pointer)

(cffi:defcfun ("zmsg_destroy" zmsg_destroy) :void
  (self_p :pointer))

(cffi:defcfun ("zmsg_recv" zmsg_recv) :pointer
  (socket :pointer))

(cffi:defcfun ("zmsg_send" zmsg_send) :int
  (self_p :pointer)
  (socket :pointer))

(cffi:defcfun ("zmsg_size" zmsg_size) size_t
  (self :pointer))

(cffi:defcfun ("zmsg_content_size" zmsg_content_size) size_t
  (self :pointer))

(cffi:defcfun ("zmsg_push" zmsg_push) :int
  (self :pointer)
  (frame :pointer))

(cffi:defcfun ("zmsg_pop" zmsg_pop) :pointer
  (self :pointer))

(cffi:defcfun ("zmsg_add" zmsg_add) :int
  (self :pointer)
  (frame :pointer))

(cffi:defcfun ("zmsg_pushmem" zmsg_pushmem) :int
  (self :pointer)
  (src :pointer)
  (size size_t))

(cffi:defcfun ("zmsg_addmem" zmsg_addmem) :int
  (self :pointer)
  (src :pointer)
  (size size_t))

(cffi:defcfun ("zmsg_pushstr" zmsg_pushstr) :int
  (self :pointer)
  (format :string)
  &rest)

(cffi:defcfun ("zmsg_addstr" zmsg_addstr) :int
  (self :pointer)
  (format :string)
  &rest)

(cffi:defcfun ("zmsg_popstr" zmsg_popstr) :string
  (self :pointer))

(cffi:defcfun ("zmsg_wrap" zmsg_wrap) :void
  (self :pointer)
  (frame :pointer))

(cffi:defcfun ("zmsg_unwrap" zmsg_unwrap) :pointer
  (self :pointer))

(cffi:defcfun ("zmsg_remove" zmsg_remove) :void
  (self :pointer)
  (frame :pointer))

(cffi:defcfun ("zmsg_first" zmsg_first) :pointer
  (self :pointer))

(cffi:defcfun ("zmsg_next" zmsg_next) :pointer
  (self :pointer))

(cffi:defcfun ("zmsg_last" zmsg_last) :pointer
  (self :pointer))

(cffi:defcfun ("zmsg_save" zmsg_save) :int
  (self :pointer)
  (file :pointer))

(cffi:defcfun ("zmsg_load" zmsg_load) :pointer
  (self :pointer)
  (file :pointer))

(cffi:defcfun ("zmsg_encode" zmsg_encode) size_t
  (self :pointer)
  (buffer :pointer))

(cffi:defcfun ("zmsg_decode" zmsg_decode) :pointer
  (buffer :pointer)
  (buffer_size size_t))

(cffi:defcfun ("zmsg_dup" zmsg_dup) :pointer
  (self :pointer))

(cffi:defcfun ("zmsg_dump" zmsg_dump) :void
  (self :pointer))

(cffi:defcfun ("zmsg_test" zmsg_test) :int
  (verbose bool))

(cffi:defcfun ("zmutex_new" zmutex_new) :pointer)

(cffi:defcfun ("zmutex_destroy" zmutex_destroy) :void
  (self_p :pointer))

(cffi:defcfun ("zmutex_lock" zmutex_lock) :void
  (self :pointer))

(cffi:defcfun ("zmutex_unlock" zmutex_unlock) :void
  (self :pointer))

(cffi:defcfun ("zmutex_test" zmutex_test) :int
  (verbose bool))

(cl:defconstant ZSOCKET_DYNFROM #xc000)

(cl:defconstant ZSOCKET_DYNTO #xffff)

(cffi:defcfun ("zsocket_new" zsocket_new) :pointer
  (self :pointer)
  (type :int))

(cffi:defcfun ("zsocket_destroy" zsocket_destroy) :void
  (self :pointer)
  (socket :pointer))

(cffi:defcfun ("zsocket_bind" zsocket_bind) :int
  (socket :pointer)
  (format :string)
  &rest)

(cffi:defcfun ("zsocket_connect" zsocket_connect) :int
  (socket :pointer)
  (format :string)
  &rest)

(cffi:defcfun ("zsocket_disconnect" zsocket_disconnect) :int
  (socket :pointer)
  (format :string)
  &rest)

(cffi:defcfun ("zsocket_poll" zsocket_poll) bool
  (socket :pointer)
  (msecs :int))

(cffi:defcfun ("zsocket_type_str" zsocket_type_str) :string
  (socket :pointer))

(cffi:defcfun ("zsocket_test" zsocket_test) :int
  (verbose bool))

(cffi:defcfun ("zsocket_type" zsocket_type) :int
  (zocket :pointer))

(cffi:defcfun ("zsocket_sndhwm" zsocket_sndhwm) :int
  (zocket :pointer))

(cffi:defcfun ("zsocket_rcvhwm" zsocket_rcvhwm) :int
  (zocket :pointer))

(cffi:defcfun ("zsocket_affinity" zsocket_affinity) :int
  (zocket :pointer))

(cffi:defcfun ("zsocket_identity" zsocket_identity) :string
  (zocket :pointer))

(cffi:defcfun ("zsocket_rate" zsocket_rate) :int
  (zocket :pointer))

(cffi:defcfun ("zsocket_recovery_ivl" zsocket_recovery_ivl) :int
  (zocket :pointer))

(cffi:defcfun ("zsocket_sndbuf" zsocket_sndbuf) :int
  (zocket :pointer))

(cffi:defcfun ("zsocket_rcvbuf" zsocket_rcvbuf) :int
  (zocket :pointer))

(cffi:defcfun ("zsocket_linger" zsocket_linger) :int
  (zocket :pointer))

(cffi:defcfun ("zsocket_reconnect_ivl" zsocket_reconnect_ivl) :int
  (zocket :pointer))

(cffi:defcfun ("zsocket_reconnect_ivl_max" zsocket_reconnect_ivl_max) :int
  (zocket :pointer))

(cffi:defcfun ("zsocket_backlog" zsocket_backlog) :int
  (zocket :pointer))

(cffi:defcfun ("zsocket_maxmsgsize" zsocket_maxmsgsize) :int
  (zocket :pointer))

(cffi:defcfun ("zsocket_multicast_hops" zsocket_multicast_hops) :int
  (zocket :pointer))

(cffi:defcfun ("zsocket_rcvtimeo" zsocket_rcvtimeo) :int
  (zocket :pointer))

(cffi:defcfun ("zsocket_sndtimeo" zsocket_sndtimeo) :int
  (zocket :pointer))

(cffi:defcfun ("zsocket_ipv4only" zsocket_ipv4only) :int
  (zocket :pointer))

(cffi:defcfun ("zsocket_rcvmore" zsocket_rcvmore) :int
  (zocket :pointer))

(cffi:defcfun ("zsocket_fd" zsocket_fd) :int
  (zocket :pointer))

(cffi:defcfun ("zsocket_events" zsocket_events) :int
  (zocket :pointer))

(cffi:defcfun ("zsocket_last_endpoint" zsocket_last_endpoint) :string
  (zocket :pointer))

(cffi:defcfun ("zsocket_set_sndhwm" zsocket_set_sndhwm) :void
  (zocket :pointer)
  (sndhwm :int))

(cffi:defcfun ("zsocket_set_rcvhwm" zsocket_set_rcvhwm) :void
  (zocket :pointer)
  (rcvhwm :int))

(cffi:defcfun ("zsocket_set_affinity" zsocket_set_affinity) :void
  (zocket :pointer)
  (affinity :int))

(cffi:defcfun ("zsocket_set_subscribe" zsocket_set_subscribe) :void
  (zocket :pointer)
  (subscribe :string))

(cffi:defcfun ("zsocket_set_unsubscribe" zsocket_set_unsubscribe) :void
  (zocket :pointer)
  (unsubscribe :string))

(cffi:defcfun ("zsocket_set_identity" zsocket_set_identity) :void
  (zocket :pointer)
  (identity :string))

(cffi:defcfun ("zsocket_set_rate" zsocket_set_rate) :void
  (zocket :pointer)
  (rate :int))

(cffi:defcfun ("zsocket_set_recovery_ivl" zsocket_set_recovery_ivl) :void
  (zocket :pointer)
  (recovery_ivl :int))

(cffi:defcfun ("zsocket_set_sndbuf" zsocket_set_sndbuf) :void
  (zocket :pointer)
  (sndbuf :int))

(cffi:defcfun ("zsocket_set_rcvbuf" zsocket_set_rcvbuf) :void
  (zocket :pointer)
  (rcvbuf :int))

(cffi:defcfun ("zsocket_set_linger" zsocket_set_linger) :void
  (zocket :pointer)
  (linger :int))

(cffi:defcfun ("zsocket_set_reconnect_ivl" zsocket_set_reconnect_ivl) :void
  (zocket :pointer)
  (reconnect_ivl :int))

(cffi:defcfun ("zsocket_set_reconnect_ivl_max" zsocket_set_reconnect_ivl_max) :void
  (zocket :pointer)
  (reconnect_ivl_max :int))

(cffi:defcfun ("zsocket_set_backlog" zsocket_set_backlog) :void
  (zocket :pointer)
  (backlog :int))

(cffi:defcfun ("zsocket_set_maxmsgsize" zsocket_set_maxmsgsize) :void
  (zocket :pointer)
  (maxmsgsize :int))

(cffi:defcfun ("zsocket_set_multicast_hops" zsocket_set_multicast_hops) :void
  (zocket :pointer)
  (multicast_hops :int))

(cffi:defcfun ("zsocket_set_rcvtimeo" zsocket_set_rcvtimeo) :void
  (zocket :pointer)
  (rcvtimeo :int))

(cffi:defcfun ("zsocket_set_sndtimeo" zsocket_set_sndtimeo) :void
  (zocket :pointer)
  (sndtimeo :int))

(cffi:defcfun ("zsocket_set_ipv4only" zsocket_set_ipv4only) :void
  (zocket :pointer)
  (ipv4only :int))

(cffi:defcfun ("zsocket_set_delay_attach_on_connect" zsocket_set_delay_attach_on_connect) :void
  (zocket :pointer)
  (delay_attach_on_connect :int))

(cffi:defcfun ("zsocket_set_router_mandatory" zsocket_set_router_mandatory) :void
  (zocket :pointer)
  (router_mandatory :int))

(cffi:defcfun ("zsocket_set_router_raw" zsocket_set_router_raw) :void
  (zocket :pointer)
  (router_raw :int))

(cffi:defcfun ("zsocket_set_xpub_verbose" zsocket_set_xpub_verbose) :void
  (zocket :pointer)
  (xpub_verbose :int))

(cffi:defcfun ("zsocket_set_hwm" zsocket_set_hwm) :void
  (zocket :pointer)
  (hwm :int))

(cffi:defcfun ("zsockopt_test" zsockopt_test) :int
  (verbose bool))

(cffi:defcfun ("zstr_recv" zstr_recv) :string
  (socket :pointer))

(cffi:defcfun ("zstr_recv_nowait" zstr_recv_nowait) :string
  (socket :pointer))

(cffi:defcfun ("zstr_send" zstr_send) :int
  (socket :pointer)
  (format :string)
  &rest)

(cffi:defcfun ("zstr_sendm" zstr_sendm) :int
  (socket :pointer)
  (format :string)
  &rest)

(cffi:defcfun ("zstr_test" zstr_test) :int
  (verbose bool))

(cffi:defcfun ("zstr_sendf" zstr_sendf) :int
  (socket :pointer)
  (format :string)
  &rest)

(cffi:defcfun ("zstr_sendfm" zstr_sendfm) :int
  (socket :pointer)
  (format :string)
  &rest)

(cffi:defcfun ("zsys_handler_set" zsys_handler_set) :void
  (handler_fn :pointer))

(cffi:defcfun ("zsys_handler_reset" zsys_handler_reset) :void)

(cffi:defcfun ("zsys_test" zsys_test) :int
  (verbose bool))

(cffi:defcfun ("zthread_new" zthread_new) :int
  (thread_fn :pointer)
  (args :pointer))

(cffi:defcfun ("zthread_fork" zthread_fork) :pointer
  (ctx :pointer)
  (thread_fn :pointer)
  (args :pointer))

(cffi:defcfun ("zthread_test" zthread_test) :int
  (verbose bool))


